import cv2, math
import numpy as np
# sidewalks = {}
# crosswalks = {}

# for block in map.blocks:
#     sidewalks = sidewalks | block.sidewalks
#     crosswalks = crosswalks | block.crosswalk

crosswalks = {"('>>', '>>>', 0)": {'polygon': [[45.0, 9.056563339135943], [45.0, 8.056563339135943], [45.0, 7.056563339135943], [45.0, 6.056563339135943], [45.0, 5.333938003481566], [50.0, 5.333938003481566], [50.0, 6.056563339135943], [50.0, 7.056563339135943], [50.0, 8.056563339135943], [50.0, 9.056563339135943]]}, "('>>', '>>>', 1)": {'polygon': [[45.0, 5.433938003481566], [45.0, 4.433938003481566], [45.0, 3.4339380034815656], [45.0, 2.4339380034815656], [45.0, 1.7113126678271886], [50.0, 1.7113126678271886], [50.0, 2.4339380034815656], [50.0, 3.4339380034815656], [50.0, 4.433938003481566], [50.0, 5.433938003481566]]}, "('>>', '>>>', 2)": {'polygon': [[45.0, 1.8113126678271885], [45.0, 0.8113126678271885], [45.0, -0.18868733217281153], [45.0, -1.1886873321728115], [45.0, -1.9113126678271886], [50.0, -1.9113126678271886], [50.0, -1.1886873321728115], [50.0, -0.18868733217281153], [50.0, 0.8113126678271885], [50.0, 1.8113126678271885]]}, "('->>>', '->>', 0)": {'polygon': [[45.0, 12.679188674790321], [45.0, 11.679188674790321], [45.0, 10.679188674790321], [45.0, 9.679188674790321], [45.0, 8.956563339135943], [50.0, 8.956563339135943], [50.0, 9.679188674790321], [50.0, 10.679188674790321], [50.0, 11.679188674790321], [50.0, 12.679188674790321]]}, "('->>>', '->>', 1)": {'polygon': [[45.0, 16.301814010444698], [45.0, 15.301814010444698], [45.0, 14.301814010444698], [45.0, 13.301814010444698], [45.0, 12.57918867479032], [50.0, 12.57918867479032], [50.0, 13.301814010444698], [50.0, 14.301814010444698], [50.0, 15.301814010444698], [50.0, 16.301814010444698]]}, "('->>>', '->>', 2)": {'polygon': [[45.0, 19.924439346099074], [45.0, 18.924439346099074], [45.0, 17.924439346099074], [45.0, 16.924439346099074], [45.0, 16.201814010444696], [50.0, 16.201814010444696], [50.0, 16.924439346099074], [50.0, 17.924439346099074], [50.0, 18.924439346099074], [50.0, 19.924439346099074]]}, "('1X0_0_', '1X0_1_', 0)": {'polygon': [[69.05656333913595, -15.0], [68.05656333913595, -15.0], [67.05656333913595, -15.0], [66.05656333913595, -15.0], [65.33393800348158, -15.0], [65.33393800348158, -10.0], [66.05656333913595, -10.0], [67.05656333913595, -10.0], [68.05656333913595, -10.0], [69.05656333913595, -10.0]]}, "('1X0_0_', '1X0_1_', 1)": {'polygon': [[65.43393800348157, -15.0], [64.43393800348157, -15.0], [63.43393800348157, -15.0], [62.43393800348157, -15.0], [61.711312667827194, -15.0], [61.711312667827194, -10.0], [62.43393800348157, -10.0], [63.43393800348157, -10.0], [64.43393800348157, -10.0], [65.43393800348157, -10.0]]}, "('1X0_0_', '1X0_1_', 2)": {'polygon': [[61.81131266782719, -15.0], [60.81131266782719, -15.0], [59.81131266782719, -15.0], [58.81131266782719, -15.0], [58.08868733217281, -15.0], [58.08868733217281, -10.0], [58.81131266782719, -10.0], [59.81131266782719, -10.0], [60.81131266782719, -10.0], [61.81131266782719, -10.0]]}, "('-1X0_1_', '-1X0_0_', 0)": {'polygon': [[72.67918867479032, -15.0], [71.67918867479032, -15.0], [70.67918867479032, -15.0], [69.67918867479032, -15.0], [68.95656333913595, -15.0], [68.95656333913595, -10.0], [69.67918867479032, -10.0], [70.67918867479032, -10.0], [71.67918867479032, -10.0], [72.67918867479032, -10.0]]}, "('-1X0_1_', '-1X0_0_', 1)": {'polygon': [[76.3018140104447, -15.0], [75.3018140104447, -15.0], [74.3018140104447, -15.0], [73.3018140104447, -15.0], [72.57918867479033, -15.0], [72.57918867479033, -10.0], [73.3018140104447, -10.0], [74.3018140104447, -10.0], [75.3018140104447, -10.0], [76.3018140104447, -10.0]]}, "('-1X0_1_', '-1X0_0_', 2)": {'polygon': [[79.92443934609908, -15.0], [78.92443934609908, -15.0], [77.92443934609908, -15.0], [76.92443934609908, -15.0], [76.2018140104447, -15.0], [76.2018140104447, -10.0], [76.92443934609908, -10.0], [77.92443934609908, -10.0], [78.92443934609908, -10.0], [79.92443934609908, -10.0]]}, "('1X1_0_', '1X1_1_', 0)": {'polygon': [[93.11312667827188, 9.056563339135943], [93.11312667827188, 8.056563339135943], [93.11312667827188, 7.056563339135943], [93.11312667827188, 6.056563339135943], [93.11312667827188, 5.333938003481566], [88.11312667827188, 5.333938003481566], [88.11312667827188, 6.056563339135943], [88.11312667827188, 7.056563339135943], [88.11312667827188, 8.056563339135943], [88.11312667827188, 9.056563339135943]]}, "('1X1_0_', '1X1_1_', 1)": {'polygon': [[93.11312667827188, 5.433938003481566], [93.11312667827188, 4.433938003481566], [93.11312667827188, 3.4339380034815656], [93.11312667827188, 2.4339380034815656], [93.11312667827188, 1.7113126678271886], [88.11312667827188, 1.7113126678271886], [88.11312667827188, 2.4339380034815656], [88.11312667827188, 3.4339380034815656], [88.11312667827188, 4.433938003481566], [88.11312667827188, 5.433938003481566]]}, "('1X1_0_', '1X1_1_', 2)": {'polygon': [[93.11312667827188, 1.8113126678271885], [93.11312667827188, 0.8113126678271885], [93.11312667827188, -0.18868733217281153], [93.11312667827188, -1.1886873321728115], [93.11312667827188, -1.9113126678271886], [88.11312667827188, -1.9113126678271886], [88.11312667827188, -1.1886873321728115], [88.11312667827188, -0.18868733217281153], [88.11312667827188, 0.8113126678271885], [88.11312667827188, 1.8113126678271885]]}, "('-1X1_1_', '-1X1_0_', 0)": {'polygon': [[93.11312667827188, 12.679188674790321], [93.11312667827188, 11.679188674790321], [93.11312667827188, 10.679188674790321], [93.11312667827188, 9.679188674790321], [93.11312667827188, 8.956563339135943], [88.11312667827188, 8.956563339135943], [88.11312667827188, 9.679188674790321], [88.11312667827188, 10.679188674790321], [88.11312667827188, 11.679188674790321], [88.11312667827188, 12.679188674790321]]}, "('-1X1_1_', '-1X1_0_', 1)": {'polygon': [[93.11312667827188, 16.301814010444698], [93.11312667827188, 15.301814010444698], [93.11312667827188, 14.301814010444698], [93.11312667827188, 13.301814010444698], [93.11312667827188, 12.57918867479032], [88.11312667827188, 12.57918867479032], [88.11312667827188, 13.301814010444698], [88.11312667827188, 14.301814010444698], [88.11312667827188, 15.301814010444698], [88.11312667827188, 16.301814010444698]]}, "('-1X1_1_', '-1X1_0_', 2)": {'polygon': [[93.11312667827188, 19.924439346099074], [93.11312667827188, 18.924439346099074], [93.11312667827188, 17.924439346099074], [93.11312667827188, 16.924439346099074], [93.11312667827188, 16.201814010444696], [88.11312667827188, 16.201814010444696], [88.11312667827188, 16.924439346099074], [88.11312667827188, 17.924439346099074], [88.11312667827188, 18.924439346099074], [88.11312667827188, 19.924439346099074]]}, "('1X2_0_', '1X2_1_', 0)": {'polygon': [[72.67918867479032, 33.11312667827188], [71.67918867479032, 33.11312667827188], [70.67918867479032, 33.11312667827188], [69.67918867479032, 33.11312667827188], [68.95656333913595, 33.11312667827188], [68.95656333913595, 28.113126678271886], [69.67918867479032, 28.113126678271886], [70.67918867479032, 28.113126678271886], [71.67918867479032, 28.113126678271886], [72.67918867479032, 28.113126678271886]]}, "('1X2_0_', '1X2_1_', 1)": {'polygon': [[76.3018140104447, 33.11312667827188], [75.3018140104447, 33.11312667827188], [74.3018140104447, 33.11312667827188], [73.3018140104447, 33.11312667827188], [72.57918867479033, 33.11312667827188], [72.57918867479033, 28.113126678271886], [73.3018140104447, 28.113126678271886], [74.3018140104447, 28.113126678271886], [75.3018140104447, 28.113126678271886], [76.3018140104447, 28.113126678271886]]}, "('1X2_0_', '1X2_1_', 2)": {'polygon': [[79.92443934609908, 33.11312667827188], [78.92443934609908, 33.11312667827188], [77.92443934609908, 33.11312667827188], [76.92443934609908, 33.11312667827188], [76.2018140104447, 33.11312667827188], [76.2018140104447, 28.113126678271886], [76.92443934609908, 28.113126678271886], [77.92443934609908, 28.113126678271886], [78.92443934609908, 28.113126678271886], [79.92443934609908, 28.113126678271886]]}, "('-1X2_1_', '-1X2_0_', 0)": {'polygon': [[69.05656333913595, 33.11312667827188], [68.05656333913595, 33.11312667827188], [67.05656333913595, 33.11312667827188], [66.05656333913595, 33.11312667827188], [65.33393800348158, 33.11312667827188], [65.33393800348158, 28.113126678271882], [66.05656333913595, 28.113126678271882], [67.05656333913595, 28.113126678271882], [68.05656333913595, 28.113126678271882], [69.05656333913595, 28.113126678271882]]}, "('-1X2_1_', '-1X2_0_', 1)": {'polygon': [[65.43393800348157, 33.11312667827188], [64.43393800348157, 33.11312667827188], [63.43393800348157, 33.11312667827188], [62.43393800348157, 33.11312667827188], [61.711312667827194, 33.11312667827188], [61.711312667827194, 28.113126678271882], [62.43393800348157, 28.113126678271882], [63.43393800348157, 28.113126678271882], [64.43393800348157, 28.113126678271882], [65.43393800348157, 28.113126678271882]]}, "('-1X2_1_', '-1X2_0_', 2)": {'polygon': [[61.81131266782719, 33.11312667827188], [60.81131266782719, 33.11312667827188], [59.81131266782719, 33.11312667827188], [58.81131266782719, 33.11312667827188], [58.08868733217281, 33.11312667827188], [58.08868733217281, 28.113126678271886], [58.81131266782719, 28.113126678271886], [59.81131266782719, 28.113126678271886], [60.81131266782719, 28.113126678271886], [61.81131266782719, 28.113126678271886]]}}
sidewalks = {"('>', '>>', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[0.0, -1.8113126678271885], [3.0, -1.8113126678271885], [6.0, -1.8113126678271885], [9.0, -1.8113126678271885], [10.1, -1.8113126678271885], [10.1, -6.811312667827188], [9.0, -6.811312667827188], [6.0, -6.811312667827188], [3.0, -6.811312667827188], [0.0, -6.811312667827188]], 'height': None}, "('->>', '->', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[10.0, 19.924439346099074], [7.0, 19.924439346099074], [4.0, 19.924439346099074], [1.0, 19.924439346099074], [-0.09999999999999964, 19.924439346099074], [-0.09999999999999964, 24.924439346099074], [1.0, 24.924439346099074], [4.0, 24.924439346099074], [7.0, 24.924439346099074], [10.0, 24.924439346099074]], 'height': None}, "('>>', '>>>', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[10.0, -1.8113126678271885], [13.0, -1.8113126678271885], [16.0, -1.8113126678271885], [19.0, -1.8113126678271885], [22.0, -1.8113126678271885], [25.0, -1.8113126678271885], [28.0, -1.8113126678271885], [31.0, -1.8113126678271885], [34.0, -1.8113126678271885], [37.0, -1.8113126678271885], [40.0, -1.8113126678271885], [43.0, -1.8113126678271885], [46.0, -1.8113126678271885], [49.0, -1.8113126678271885], [50.1, -1.8113126678271885], [50.1, -6.811312667827188], [49.0, -6.811312667827188], [46.0, -6.811312667827188], [43.0, -6.811312667827188], [40.0, -6.811312667827188], [37.0, -6.811312667827188], [34.0, -6.811312667827188], [31.0, -6.811312667827188], [28.0, -6.811312667827188], [25.0, -6.811312667827188], [22.0, -6.811312667827188], [19.0, -6.811312667827188], [16.0, -6.811312667827188], [13.0, -6.811312667827188], [10.0, -6.811312667827188]], 'height': None}, "('->>>', '->>', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[50.0, 19.924439346099074], [47.0, 19.924439346099074], [44.0, 19.924439346099074], [41.0, 19.924439346099074], [38.0, 19.924439346099074], [35.0, 19.924439346099074], [32.0, 19.924439346099074], [29.0, 19.924439346099074], [26.0, 19.924439346099074], [23.0, 19.924439346099074], [20.0, 19.924439346099074], [17.0, 19.924439346099074], [14.0, 19.924439346099074], [11.0, 19.924439346099074], [9.899999999999999, 19.924439346099074], [9.899999999999999, 24.924439346099074], [11.0, 24.924439346099074], [14.0, 24.924439346099074], [17.0, 24.924439346099074], [20.0, 24.924439346099074], [23.0, 24.924439346099074], [26.0, 24.924439346099074], [29.0, 24.924439346099074], [32.0, 24.924439346099074], [35.0, 24.924439346099074], [38.0, 24.924439346099074], [41.0, 24.924439346099074], [44.0, 24.924439346099074], [47.0, 24.924439346099074], [50.0, 24.924439346099074]], 'height': None}, "('>>>', '1X0_0_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[50.0, -1.8113126678271882], [52.419922572688805, -2.1770481935347012], [54.62368066909665, -3.2415847053980587], [56.41441914181665, -4.909830327269667], [57.632176656349756, -7.032765646202277], [58.16817456071051, -9.420755172790328], [58.18827790121814, -10.08188550854733], [53.18852789913482, -10.031886341876497], [53.18069962769024, -9.774441181128843], [52.97198122651362, -8.844554418585645], [52.497784593679235, -8.01788016862299], [51.80046830212147, -7.36826277994645], [50.94232153938211, -6.953730639162731], [50.0, -6.811312667827188]], 'height': None}, "('1X0_0_', '1X0_1_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[58.18868733217281, -10.0], [58.18868733217281, -13.0], [58.18868733217281, -16.0], [58.18868733217281, -19.0], [58.18868733217281, -22.0], [58.18868733217281, -25.0], [58.18868733217281, -28.0], [58.18868733217281, -31.0], [58.18868733217281, -34.0], [58.18868733217281, -37.0], [58.18868733217281, -40.0], [58.18868733217281, -43.0], [58.18868733217281, -45.1], [53.18868733217281, -45.1], [53.18868733217281, -43.0], [53.18868733217281, -40.0], [53.18868733217281, -37.0], [53.18868733217281, -34.0], [53.18868733217281, -31.0], [53.18868733217281, -28.0], [53.18868733217281, -25.0], [53.18868733217281, -22.0], [53.18868733217281, -19.0], [53.18868733217281, -16.0], [53.18868733217281, -13.0], [53.18868733217281, -10.0]], 'height': None}, "('-1X0_1_', '-1X0_0_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[79.92443934609908, -45.0], [79.92443934609908, -42.0], [79.92443934609908, -39.0], [79.92443934609908, -36.0], [79.92443934609908, -33.0], [79.92443934609908, -30.0], [79.92443934609908, -27.0], [79.92443934609908, -24.0], [79.92443934609908, -21.0], [79.92443934609908, -18.0], [79.92443934609908, -15.0], [79.92443934609908, -12.0], [79.92443934609908, -9.899999999999999], [84.92443934609906, -9.899999999999999], [84.92443934609906, -12.0], [84.92443934609906, -15.0], [84.92443934609906, -18.0], [84.92443934609906, -21.0], [84.92443934609906, -24.0], [84.92443934609906, -27.0], [84.92443934609906, -30.0], [84.92443934609906, -33.0], [84.92443934609906, -36.0], [84.92443934609906, -39.0], [84.92443934609906, -42.0], [84.92443934609906, -45.0]], 'height': None}, "('-1X0_0_', '1X1_0_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[79.92443934609906, -9.999999999999998], [80.29017487180658, -7.580077427311197], [81.35471138366994, -5.376319330903349], [83.02295700554154, -3.5855808581833495], [85.14589232447416, -2.3678233436502465], [87.5338818510622, -1.8318254392894904], [88.19501218681921, -1.8117220987818552], [88.14501302014838, -6.811472100865181], [87.88756785940072, -6.819300372309764], [86.95768109685753, -7.028018773486378], [86.13100684689488, -7.502215406320767], [85.48138945821833, -8.199531697878527], [85.06685731743461, -9.057678460617895], [84.92443934609906, -10.0]], 'height': None}, "('1X1_0_', '1X1_1_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[88.11312667827188, -1.8113126678271885], [91.11312667827188, -1.8113126678271885], [94.11312667827188, -1.8113126678271885], [97.11312667827188, -1.8113126678271885], [100.11312667827188, -1.8113126678271885], [103.11312667827188, -1.8113126678271885], [106.11312667827188, -1.8113126678271885], [109.11312667827188, -1.8113126678271885], [112.11312667827188, -1.8113126678271885], [115.11312667827188, -1.8113126678271885], [118.11312667827188, -1.8113126678271885], [121.11312667827188, -1.8113126678271885], [123.21312667827189, -1.8113126678271885], [123.21312667827189, -6.811312667827188], [121.11312667827188, -6.811312667827188], [118.11312667827188, -6.811312667827188], [115.11312667827188, -6.811312667827188], [112.11312667827188, -6.811312667827188], [109.11312667827188, -6.811312667827188], [106.11312667827188, -6.811312667827188], [103.11312667827188, -6.811312667827188], [100.11312667827188, -6.811312667827188], [97.11312667827188, -6.811312667827188], [94.11312667827188, -6.811312667827188], [91.11312667827188, -6.811312667827188], [88.11312667827188, -6.811312667827188]], 'height': None}, "('-1X1_1_', '-1X1_0_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[123.11312667827188, 19.924439346099074], [120.11312667827188, 19.924439346099074], [117.11312667827188, 19.924439346099074], [114.11312667827188, 19.924439346099074], [111.11312667827188, 19.924439346099074], [108.11312667827188, 19.924439346099074], [105.11312667827188, 19.924439346099074], [102.11312667827188, 19.924439346099074], [99.11312667827188, 19.924439346099074], [96.11312667827188, 19.924439346099074], [93.11312667827188, 19.924439346099074], [90.11312667827188, 19.924439346099074], [88.01312667827187, 19.924439346099074], [88.01312667827187, 24.924439346099074], [90.11312667827188, 24.924439346099074], [93.11312667827188, 24.924439346099074], [96.11312667827188, 24.924439346099074], [99.11312667827188, 24.924439346099074], [102.11312667827188, 24.924439346099074], [105.11312667827188, 24.924439346099074], [108.11312667827188, 24.924439346099074], [111.11312667827188, 24.924439346099074], [114.11312667827188, 24.924439346099074], [117.11312667827188, 24.924439346099074], [120.11312667827188, 24.924439346099074], [123.11312667827188, 24.924439346099074]], 'height': None}, "('-1X1_0_', '1X2_0_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[88.11312667827188, 19.924439346099074], [85.69320410558308, 20.290174871806588], [83.48944600917523, 21.354711383669944], [81.69870753645523, 23.02295700554155], [80.48095002192213, 25.145892324474165], [79.94495211756137, 27.533881851062212], [79.92484877705374, 28.195012186819213], [84.92459877913707, 28.145013020148383], [84.93242705058165, 27.88756785940073], [85.14114545175826, 26.95768109685753], [85.61534208459265, 26.131006846894874], [86.31265837615041, 25.481389458218338], [87.17080513888978, 25.066857317434618], [88.11312667827188, 24.924439346099074]], 'height': None}, "('1X2_0_', '1X2_1_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[79.92443934609908, 28.113126678271886], [79.92443934609908, 31.113126678271886], [79.92443934609908, 34.11312667827188], [79.92443934609908, 37.11312667827188], [79.92443934609908, 40.11312667827188], [79.92443934609908, 43.11312667827188], [79.92443934609908, 46.11312667827188], [79.92443934609908, 49.11312667827188], [79.92443934609908, 52.11312667827188], [79.92443934609908, 55.11312667827188], [79.92443934609908, 58.11312667827188], [79.92443934609908, 61.11312667827188], [79.92443934609908, 63.21312667827189], [84.92443934609906, 63.21312667827189], [84.92443934609906, 61.11312667827188], [84.92443934609906, 58.11312667827188], [84.92443934609906, 55.11312667827188], [84.92443934609906, 52.11312667827188], [84.92443934609906, 49.11312667827188], [84.92443934609906, 46.11312667827188], [84.92443934609906, 43.11312667827188], [84.92443934609906, 40.11312667827188], [84.92443934609906, 37.11312667827188], [84.92443934609906, 34.11312667827188], [84.92443934609906, 31.113126678271886], [84.92443934609906, 28.113126678271886]], 'height': None}, "('-1X2_1_', '-1X2_0_', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[58.18868733217281, 63.11312667827188], [58.18868733217281, 60.11312667827188], [58.18868733217281, 57.11312667827188], [58.18868733217281, 54.11312667827188], [58.18868733217281, 51.11312667827188], [58.18868733217281, 48.11312667827188], [58.18868733217281, 45.11312667827188], [58.18868733217281, 42.11312667827188], [58.18868733217281, 39.11312667827188], [58.18868733217281, 36.11312667827188], [58.18868733217281, 33.11312667827188], [58.18868733217281, 30.113126678271882], [58.18868733217281, 28.01312667827188], [53.18868733217281, 28.01312667827188], [53.18868733217281, 30.113126678271882], [53.18868733217281, 33.11312667827188], [53.18868733217281, 36.11312667827188], [53.18868733217281, 39.11312667827188], [53.18868733217281, 42.11312667827188], [53.18868733217281, 45.11312667827188], [53.18868733217281, 48.11312667827188], [53.18868733217281, 51.11312667827188], [53.18868733217281, 54.11312667827188], [53.18868733217281, 57.11312667827188], [53.18868733217281, 60.11312667827188], [53.18868733217281, 63.11312667827188]], 'height': None}, "('-1X2_0_', '->>>', 2)": {'type': 'ROAD_EDGE_SIDEWALK', 'polygon': [[58.18868733217281, 28.113126678271882], [57.8229518064653, 25.693204105583078], [56.75841529460194, 23.489446009175232], [55.09016967273033, 21.69870753645523], [52.96723435379772, 20.48095002192213], [50.57924482720967, 19.94495211756137], [49.91811449145267, 19.92484877705374], [49.96811365812351, 24.924598779137064], [50.22555881887116, 24.932427050581644], [51.155445581414355, 25.141145451758263], [51.98211983137701, 25.615342084592648], [52.63173722005355, 26.31265837615041], [53.04626936083727, 27.17080513888978], [53.18868733217281, 28.113126678271882]], 'height': None}}
polygons = []
mask_delta = 2
sprawn_num = 3 #200

for sidewalk in sidewalks.keys():
    polygon = sidewalks[sidewalk]['polygon']
    polygons += polygon
for crosswalk in crosswalks.keys():
    polygon = crosswalks[crosswalk]['polygon']
    polygons += polygon

polygon_array = np.array(polygons)
min_x = np.min(polygon_array[:, 0])
max_x = np.max(polygon_array[:, 0])
min_y = np.min(polygon_array[:, 1])
max_y = np.max(polygon_array[:, 1])

rows = math.ceil(max_y - min_y) + 2*mask_delta
columns = math.ceil(max_x - min_x) + 2*mask_delta


mask_translate = np.array([-min_x+mask_delta, -min_y+mask_delta])

walkable_regions_mask = np.zeros((rows, columns, 3), np.uint8)

for sidewalk in sidewalks.keys():
    polygon_array = np.array(sidewalks[sidewalk]['polygon'])
    polygon_array += mask_translate
    polygon_array = np.floor(polygon_array).astype(int)
    polygon_array = polygon_array.reshape((-1,1,2))
    cv2.fillPoly(walkable_regions_mask, [polygon_array], [255, 255, 255])


for crosswalk in crosswalks.keys():
    polygon_array = np.array(crosswalks[crosswalk]['polygon'])
    polygon_array += mask_translate
    polygon_array = np.floor(polygon_array).astype(int)
    polygon_array = polygon_array.reshape((-1,1,2))
    cv2.fillPoly(walkable_regions_mask, [polygon_array], [255, 255, 255])

def random_start_and_end_points(walkable_regions_mask, sprawn_num):
    coordinate = np.argwhere(walkable_regions_mask == 255)
    np.random.shuffle(coordinate)
    start_points = np.flip(coordinate[0:sprawn_num], 1)
    end_points = np.flip(coordinate[sprawn_num:2*sprawn_num], 1)
    # start_points = coordinate[0:sprawn_num]
    # end_points = coordinate[sprawn_num:2*sprawn_num]
    return start_points, end_points

start_points, end_points = random_start_and_end_points(walkable_regions_mask[:, :, 0], sprawn_num)
# print(len(start_points), len(end_points), start_points[0:2], end_points[0:2])


from PIL import Image, ImageOps
import xml.etree.ElementTree as ET
from xml.dom import minidom
from skimage import measure
import math

######## Find Contour ########
def slope(p1, p2):
    ## calculate slope of point p1 and p2 -> (x,y)
    if (p2[0]- p1[0]) == 0: return np.inf
    elif (p2[1]- p1[1]) == 0: return 0
    else: return (p2[1]- p1[1]) / p2[0]- p1[0]

def is_collinear(p1, p2, p3):
    ## determine whether three points are col-linear
    return np.abs(slope(p1,p2) - slope(p2,p3)) < 0.1

def remove_middle_points(pts):
    ## eliminate middle points on the same straight line segment 
    if len(pts)<3: return pts
    filtered = [pts[0]]
    prev_pt = pts[0]

    for i in range(1, len(pts)-1):
        next_pt = pts[i+1]
        if is_collinear(prev_pt, pts[i], next_pt): continue
        filtered.append(pts[i])

    filtered.append(pts[-1]) # add last point
    return filtered

def find_tuning_point(contour, h):
    unique_pt = []
    filtered_contour = []
    ppp = len(contour)
    for i, (y,x) in enumerate(contour):
        if len(unique_pt) == 0 or (x != unique_pt[-1][0] and (h - 1 - y) != unique_pt[-1][1]):
            y = h - 1 - y
            unique_pt.append([x,y])
    prev_len = len(unique_pt)
    unique_pt = remove_middle_points(unique_pt)
    return np.array(unique_pt)

def mask_to_2d_list(mask, extend=False, upsample=1):
    ## get <map> required by xml
    img = Image.fromarray(mask)
    # if upsample>1:
    #     neww = img.width * upsample
    #     newh = img.height * upsample
    #     img = img.resize((neww, newh), Image.BICUBIC)
    # if extend:
    #     img = ImageOps.expand(img, border=2, fill='black')

    img = img.convert('L')
    binary_array = img.point(lambda x:0 if x<128 else 1, mode='1')
    h = binary_array.size[1]
    w = binary_array.size[0]
    binary_list = []
    for y in range(h):
        row = []
        for x in range(w):
            row.append(1 - binary_array.getpixel((x,y))) ## revert 0 & 1
        binary_list.append(np.array(row))
    binary_list = np.array(binary_list)
    return binary_list, h, w

def prettify(elem):
    ## add indent in xml
    rough_str = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_str)
    return reparsed.toprettyxml(indent="   ", encoding="utf-8")

def write_to_xml(grid, width, height, cellsize, flipped_contours, agentdict, filename):
    root = ET.Element('root')

    agents = ET.SubElement(root,'agents')
    agents.set('number', str(len(agentdict['agent'])))
    agents.set('type', agentdict['type'])
    default_parameters = ET.SubElement(agents,'agents',
                                       size="0.3", 
                                       movespeed="1", 
                                       agentsmaxnum="10", 
                                       timeboundary="5.4", 
                                       sightradius="3.0", 
                                       timeboundaryobst="33")

    for agent in agentdict['agent']:
        tmpagent = ET.SubElement(agents,"agent",
                            id=agent["id"],
                            size=agent["size"],
                            **{"start.xr":str(agent["start.xr"]),
                            "start.yr":str(agent["start.yr"]),
                            "goal.xr":str(agent["goal.xr"]), 
                            "goal.yr":str(agent["goal.yr"])})
    obstacles = ET.SubElement(root,'obstacles')
    obstacles.set('number', str(len(flipped_contours)))
    for k, contour in enumerate(flipped_contours):
        obstacle = ET.SubElement(obstacles, 'obstacle')
        for pt in contour:
            xr, yr = pt
            vertex = ET.SubElement(obstacle,'vertex')
            vertex.set('xr', str(int(xr)))
            vertex.set('yr', str(int(yr)))

    map = ET.SubElement(root, "map")
    width_elem = ET.SubElement(map, "width")
    width_elem.text = str(width)
    height_elem = ET.SubElement(map, "height")
    height_elem.text = str(height)
    cellsize_elem = ET.SubElement(map, "cellsize")
    cellsize_elem.text = str(cellsize)
    grid_elem = ET.SubElement(map, "grid")
    for row in grid: 
        row_elem = ET.SubElement(grid_elem,"row")
        row_elem.text = " ".join(str(cell) for cell in row)     

    algo = ET.SubElement(root, 'algorithm')
    searchtype = ET.SubElement(algo, 'searchtype')
    searchtype.text = 'thetastar'
    breakingties = ET.SubElement(algo, 'breakingties')
    breakingties.text = '0'
    allowsqueeze = ET.SubElement(algo, 'allowsqueeze')
    allowsqueeze.text = 'false'
    cutcorners = ET.SubElement(algo, 'cutcorners')
    cutcorners.text = 'false'
    hweight = ET.SubElement(algo, 'hweight')
    hweight.text = '1'
    timestep = ET.SubElement(algo, 'timestep')
    timestep.text = '0.1'
    delta = ET.SubElement(algo, 'delta')
    delta.text = '0.1'
    trigger = ET.SubElement(algo, 'trigger')
    trigger.text = 'speed-buffer'
    mapfnum = ET.SubElement(algo, 'mapfnum')
    mapfnum.text = '3'

    tree = ET.ElementTree(root)
    with open(filename, "wb") as f:
        f.write(prettify(root))

def generate_template_xml(mask, template_xml_file):
        cellsize = 1
        agentdict = {"type":"orca-par-ecbs",  "agent": []}

        mylist, h, w = mask_to_2d_list(mask)
        contours = measure.find_contours(mylist, 0.5, positive_orientation='high')

        flipped_contours = []
        for contour in contours:
            contour = find_tuning_point(contour, h)
            flipped_contours.append(contour)

        write_to_xml(mylist, w, h, cellsize, flipped_contours, agentdict, template_xml_file)

import sys
sys.path.insert(0, './orca_algo/build')
import bind
def set_agents(start_positions, goals, template_xml_file):
    ## overwrite agents' start and goal position in xml file
    tree = ET.parse(template_xml_file)
    root = tree.getroot()
    agents = root.findall('./agents')[0]
    agents.set("number", f"{len(start_positions)}")
    num_agent = len(start_positions)
    # """
    # movespeed element not found in XML file (or it is incorrect) at agent 13
    # agentsmaxnum element not found in XML file (or it is incorrect) at agent 13
    # timeboundary element not found in XML file (or it is incorrect) at agent 13
    # sightradius element not found in XML file (or it is incorrect) at agent 13
    # timeboundaryobst element not found in XML file (or it is incorrect) at agent 13
    # reps element not found in XML file (or it is incorrect) at agent 13
    # Position of agent 13 is too close to some obstacle
    # """
    for cnt, (pos, goal) in enumerate(zip(start_positions, goals)):
        agent = ET.Element("agent")
        # print(cnt)
        # id="1" size="0.3" start.xr="130" start.yr="176" goal.xr="116" goal.yr="243"
        agent.set('id', f'{cnt}')
        agent.set('size', f'{0.3}')
        agent.set('start.xr', f'{pos[0]}')
        agent.set('start.yr', f'{pos[1]}')
        agent.set('goal.xr', f'{goal[0]+0.5}') # magic number 
        agent.set('goal.yr', f'{goal[1]+0.5}')

        agents.append(agent)
    tree.write(template_xml_file)

def get_planning( start_positions, goals, num_agent):
    set_agents(start_positions, goals, template_xml_file) ## overwrite template_xml_file by new agent's starts & goal position 
    result = bind.demo(template_xml_file, num_agent)

    nexts = []
    for k, v in result.items():
        nextxr = np.array(v.xr)
        nextyr = np.array(v.yr)
        nextr = np.stack([nextxr, nextyr], axis=1)
        nexts.append(nextr)

    nexts = np.stack(nexts, axis=1)
    next_positions = list(nexts)

    return next_positions # --> next_positions.shape: [# steps, np.array(sprawn_num,2)] 

template_xml_file = 'test_sample.xml'
generate_template_xml(walkable_regions_mask, template_xml_file)
nexts = get_planning(start_points, end_points, sprawn_num)
print(len(nexts), nexts.pop(0), type(nexts[1]))
# --> nexts.shape: [1001 steps, np.array(sprawn_num,2)]
# print(start_points[0][0], start_points[0][1])


## convert nexts for visualization, now converted_nexts's shape is [sprawn_num, np.array(1001 steps, 2)]
converted_nexts = np.stack(nexts)
converted_nexts = [converted_nexts[:,i,:] for i in range(converted_nexts.shape[1])]
print(len(converted_nexts), len(converted_nexts[0]), converted_nexts[0][0])

# visualization
import matplotlib.pyplot as plt
import matplotlib.animation as animation
points_lists = []
fig, ax = plt.subplots()
plt.imshow(walkable_regions_mask, origin='lower')

colors = []
for i in range(sprawn_num):
    colors.append(np.random.rand(1, 3))
#     plt.plot(start_points[i][0], start_points[i][1], 'o', c=color, markersize=5)
#     plt.plot(end_points[i][0], end_points[i][1], 'x', c=color, markersize=5)
fixed_goal = ax.scatter([p[0] for p in end_points], [p[1] for p in end_points], marker='x', color=colors)
fixed_start = ax.scatter([p[0] for p in start_points], [p[1] for p in start_points], marker='o', color=colors)
scatters = [ax.scatter([],[], label=f'Agent {i+1}', color=colors[i]) for i in range(len(converted_nexts))]

def update(frame):
    for i, points_list in enumerate(converted_nexts):
        if frame < len(points_list):
            x, y = points_list[frame]
            scatters[i].set_offsets((x,y))
        else:
            scatters[i].set_offsets([],[])
    return scatters
ani = animation.FuncAnimation(fig, update, frames=len(max(converted_nexts,key=len)), blit=True, interval=10)
    

plt.show()

# ORCA

# self.planning = OrcaPlanning("./metadrive/orca_algo/task_examples_demo/custom_road_template.xml")
# self.planning.get_planing(self.start_points, end_points)

# pos = self.planning.get_next()
# pos = self.planning.coord_orca_to_mask(pos)

